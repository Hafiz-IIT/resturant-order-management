// Filename: server.js
// Full Restaurant Management Backend - Ready to Copy

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect('mongodb://127.0.0.1:27017/restaurant', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Schemas & Models
const MenuItem = mongoose.model('MenuItem', new mongoose.Schema({
  name: String,
  category: String,
  price: Number,
  ingredients: [String],
  tags: [String], // spicy, vegan, etc.
  availability: Boolean,
  image: String,
}));

const Order = mongoose.model('Order', new mongoose.Schema({
  items: [{ name: String, quantity: Number }],
  status: { type: String, default: 'Placed' },
  customerName: String,
  tableNumber: Number,
  timestamp: { type: Date, default: Date.now },
  notes: String,
}));

const Feedback = mongoose.model('Feedback', new mongoose.Schema({
  customerName: String,
  rating: Number,
  comment: String,
  sentiment: String, // happy, neutral, angry (future AI analysis)
}));

const Admin = mongoose.model('Admin', new mongoose.Schema({
  username: String,
  password: String, // store hashed in production
}));

// Middleware - Simple Token Auth
const verifyToken = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).send('Access Denied');
  try {
    const verified = jwt.verify(token, process.env.JWT_SECRET);
    req.user = verified;
    next();
  } catch (err) {
    res.status(400).send('Invalid Token');
  }
};

// Routes

// Auth Routes
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const admin = await Admin.findOne({ username, password });
  if (!admin) return res.status(401).json({ message: 'Invalid credentials' });
  const token = jwt.sign({ id: admin._id }, process.env.JWT_SECRET);
  res.json({ token });
});

// Menu CRUD
app.get('/api/menu', async (req, res) => {
  const menu = await MenuItem.find();
  res.json(menu);
});

app.post('/api/menu', verifyToken, async (req, res) => {
  const item = new MenuItem(req.body);
  await item.save();
  res.json(item);
});

app.put('/api/menu/:id', verifyToken, async (req, res) => {
  const updated = await MenuItem.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(updated);
});

app.delete('/api/menu/:id', verifyToken, async (req, res) => {
  await MenuItem.findByIdAndDelete(req.params.id);
  res.json({ message: 'Item deleted' });
});

// Order Routes
app.post('/api/orders', async (req, res) => {
  const order = new Order(req.body);
  await order.save();
  res.json(order);
});

app.get('/api/orders', async (req, res) => {
  const orders = await Order.find().sort({ timestamp: -1 });
  res.json(orders);
});

app.put('/api/orders/:id/status', verifyToken, async (req, res) => {
  const updated = await Order.findByIdAndUpdate(req.params.id, { status: req.body.status }, { new: true });
  res.json(updated);
});

// Feedback Routes
app.post('/api/feedback', async (req, res) => {
  const feedback = new Feedback(req.body);
  await feedback.save();
  res.json(feedback);
});

app.get('/api/feedback', verifyToken, async (req, res) => {
  const feedbacks = await Feedback.find();
  res.json(feedbacks);
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
